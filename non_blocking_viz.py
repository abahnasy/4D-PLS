"""
used to visualize a whole sequence
mainly read the point cloud generated by generate_viz.py
WARNING: runs from the local machine, not suitable for Cloud instances
"""

import os
import glob

import numpy as np
import open3d as o3d

BASEDIR = os.path.abspath(os.path.dirname(__file__))
POINTCLOUD_FOLDER = os.path.join(BASEDIR, "seq_4_volumes_4k_points/*.ply")
VELO_FOLDER = os.path.join(BASEDIR, "original_frames_seq_4/*.bin")
paths = glob.glob(POINTCLOUD_FOLDER)
# paths = glob.glob(VELO_FOLDER)
paths =sorted(paths)


def read_velodyne_bin(bin_file_path):
    """ Read *.bin and convert into pcd file for the visualizer
    """
    frame_points = np.fromfile(bin_file_path, dtype=np.float32)
    points = frame_points.reshape((-1, 4))
    points = points[:, :3]
    pcd = o3d.geometry.PointCloud()
    pcd.points = o3d.utility.Vector3dVector(points)
    return pcd

def main():
    # read the ply file
    idx = 0
    pcd = o3d.io.read_point_cloud(paths[idx])
    # pcd = read_velodyne_bin(paths[idx])
    vis = o3d.visualization.VisualizerWithKeyCallback()
    vis.create_window()
    vis.add_geometry(pcd)

    def right_click(vis):
        nonlocal idx
        idx=idx+1
        print('Reading frame idx {}'.format(idx))
        vis.clear_geometries()
        # pcd = read_velodyne_bin(paths[idx])
        pcd=o3d.io.read_point_cloud(paths[idx])
        vis.add_geometry(pcd)
            
    def exit_key(vis):
        print("exit key")
        vis.destroy_window()

    vis.register_key_callback(262,right_click)
    vis.register_key_callback(32,exit_key)
    vis.poll_events()
    vis.run()
    #vis.destroy_window()  


if __name__ == '__main__':
    main()
    # for testing
    # print(paths)
    # print(paths[2])
    # pcd = read_velodyne_bin(paths[2])
    # o3d.visualization.draw_geometries([pcd])



